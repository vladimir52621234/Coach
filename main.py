import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN, MAIN_KEYBOARD, EDIT_KEYBOARD, BACK_BUTTON, DAYS_OF_WEEK
from logic import WorkoutStates, load_data, save_data, format_schedule

### --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


### --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=btn)] for btn in MAIN_KEYBOARD],
        resize_keyboard=True
    )


def get_edit_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=btn)] for btn in EDIT_KEYBOARD],
        resize_keyboard=True
    )


def get_days_kb():
    buttons = [KeyboardButton(text=day) for day in DAYS_OF_WEEK]
    buttons.append(KeyboardButton(text=BACK_BUTTON))
    return ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)


### --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb()
    )


@dp.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
async def show_schedule(message: types.Message):
    data = load_data(message.from_user.id)
    await message.answer(format_schedule(data), parse_mode="HTML")


@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
async def edit_schedule_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_edit_kb())


@dp.message(F.text == BACK_BUTTON)
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb())


### --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def add_exercise_start(message: types.Message, state: FSMContext):
    await state.set_state(WorkoutStates.waiting_for_day)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_days_kb())


@dp.message(WorkoutStates.waiting_for_day)
async def add_exercise_day(message: types.Message, state: FSMContext):
    if message.text not in DAYS_OF_WEEK:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return

    await state.update_data(day=message.text)
    await state.set_state(WorkoutStates.waiting_for_exercise)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(WorkoutStates.waiting_for_exercise)
async def add_exercise_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    day = data["day"]
    exercise = message.text

    workout_data = load_data(message.from_user.id)
    if day not in workout_data:
        workout_data[day] = []

    workout_data[day].append({"name": exercise})
    save_data(message.from_user.id, workout_data)

    await state.clear()
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {day}!", reply_markup=get_main_kb())


### --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é ---
@dp.message(F.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å")
async def add_weight_start(message: types.Message, state: FSMContext):
    workout_data = load_data(message.from_user.id)
    if not workout_data:
        await message.answer("–ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
        return

    buttons = [KeyboardButton(text=day) for day in workout_data.keys()]
    buttons.append(KeyboardButton(text=BACK_BUTTON))

    kb = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await state.set_state(WorkoutStates.waiting_for_edit_day)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞:", reply_markup=kb)


@dp.message(WorkoutStates.waiting_for_edit_day, F.text.in_(DAYS_OF_WEEK))
async def add_weight_day(message: types.Message, state: FSMContext):
    workout_data = load_data(message.from_user.id)
    day = message.text

    if day not in workout_data or not workout_data[day]:
        await message.answer("‚ùå –í —ç—Ç–æ–º –¥–Ω–µ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!")
        return

    await state.update_data(day=day)
    exercises = workout_data[day]

    buttons = [KeyboardButton(text=str(i)) for i in range(1, len(exercises) + 1)]
    buttons.append(KeyboardButton(text=BACK_BUTTON))

    kb = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    response = f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ {day}:\n"
    for i, ex_data in enumerate(exercises, 1):
        exercise = ex_data['name']
        weight = ex_data.get('weight', '')
        if weight:
            response += f"{i}. {exercise} ({weight} –∫–≥)\n"
        else:
            response += f"{i}. {exercise}\n"

    await state.set_state(WorkoutStates.waiting_for_edit_choice)
    await message.answer(response + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞:", reply_markup=kb)


@dp.message(WorkoutStates.waiting_for_edit_choice, F.text.regexp(r'^\d+$'))
async def add_weight_exercise(message: types.Message, state: FSMContext):
    num = int(message.text)
    data = await state.get_data()
    day = data["day"]

    workout_data = load_data(message.from_user.id)
    exercises = workout_data[day]

    if num < 1 or num > len(exercises):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        return

    await state.update_data(exercise_num=num - 1)
    await state.set_state(WorkoutStates.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥):", reply_markup=types.ReplyKeyboardRemove())


@dp.message(WorkoutStates.waiting_for_weight)
async def add_weight_finish(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)!")
        return

    data = await state.get_data()
    day = data["day"]
    exercise_num = data["exercise_num"]

    workout_data = load_data(message.from_user.id)
    workout_data[day][exercise_num]['weight'] = f"{weight:.1f}".rstrip('0').rstrip('.')
    save_data(message.from_user.id, workout_data)

    exercise_name = workout_data[day][exercise_num]['name']
    await state.clear()
    await message.answer(
        f"‚úÖ –í–µ—Å {weight} –∫–≥ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é '{exercise_name}' –≤ {day}!",
        reply_markup=get_main_kb()
    )


### --- –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def remove_exercise_start(message: types.Message, state: FSMContext):
    workout_data = load_data(message.from_user.id)
    if not workout_data:
        await message.answer("–ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return

    buttons = [KeyboardButton(text=day) for day in workout_data.keys()]
    buttons.append(KeyboardButton(text=BACK_BUTTON))

    kb = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await state.set_state(WorkoutStates.waiting_for_edit_day)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.message(WorkoutStates.waiting_for_edit_day)
async def remove_exercise_day(message: types.Message, state: FSMContext):
    if message.text == BACK_BUTTON:
        await state.clear()
        return await edit_schedule_menu(message)

    workout_data = load_data(message.from_user.id)
    if message.text not in workout_data:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ!")
        return

    await state.update_data(day=message.text)
    exercises = workout_data[message.text]

    if not exercises:
        await message.answer("–í —ç—Ç–æ–º –¥–Ω–µ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        await state.clear()
        return

    buttons = [KeyboardButton(text=str(i)) for i in range(1, len(exercises) + 1)]
    buttons.append(KeyboardButton(text=BACK_BUTTON))

    kb = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    response = f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ {message.text}:\n"
    for i, ex_data in enumerate(exercises, 1):
        exercise = ex_data['name']
        weight = ex_data.get('weight', '')
        if weight:
            response += f"{i}. {exercise} ({weight} –∫–≥)\n"
        else:
            response += f"{i}. {exercise}\n"

    await state.set_state(WorkoutStates.waiting_for_edit_choice)
    await message.answer(response + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.message(WorkoutStates.waiting_for_edit_choice)
async def remove_exercise_finish(message: types.Message, state: FSMContext):
    if message.text == BACK_BUTTON:
        await state.clear()
        return await edit_schedule_menu(message)

    try:
        num = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        return

    data = await state.get_data()
    day = data["day"]

    workout_data = load_data(message.from_user.id)
    exercises = workout_data[day]

    if num < 1 or num > len(exercises):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        return

    removed_ex = exercises.pop(num - 1)['name']
    if not exercises:
        del workout_data[day]

    save_data(message.from_user.id, workout_data)
    await state.clear()
    await message.answer(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {removed_ex}", reply_markup=get_main_kb())


### --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    dp.run_polling(bot)
